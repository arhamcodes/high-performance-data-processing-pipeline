# services:
#   api:
#     build: 
#       context: ./api-python
#       dockerfile: Dockerfile
#     ports:
#       - "8000:8000"
#     networks:
#       - pipeline-network
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 3

#   worker:
#     build:
#       context: ./worker-go
#       dockerfile: Dockerfile
#     networks:
#       - pipeline-network
#     depends_on:
#       api:
#         condition: service_healthy

#   legacy:
#     build:
#       context: ./legacy-java/demo
#       dockerfile: Dockerfile
#     ports:
#       - "8080:8080"
#     networks:
#       - pipeline-network
#     depends_on:
#       api:
#         condition: service_healthy

# networks:
#   pipeline-network:
#     driver: bridge

version: '3.8'

services:
  api:
    build: ./api-python
    ports:
      - "8000:8000"
    depends_on:
      - rabbitmq
      - postgres
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - POSTGRES_URL=postgresql://arham@postgres:5432/orders

  worker:
    build: ./worker-go
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: arham
      POSTGRES_DB: orders
      POSTGRES_HOST_AUTH_METHOD: trust 
    volumes:
      - ./infra/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"

  redis:
    image: redis:6
    ports:
      - "6379:6379"